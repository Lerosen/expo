{"version":3,"file":"InstallationIdProvider.web.js","sourceRoot":"","sources":["../src/InstallationIdProvider.web.ts"],"names":[],"mappings":"AAAA,OAAO,IAAI,MAAM,SAAS,CAAC;AAI3B,MAAM,mBAAmB,GAAG,uCAAuC,CAAC;AAEpE,eAAe;IACb,sBAAsB,EAAE,KAAK,IAAI,EAAE;QACjC,IAAI,cAAc,GAAG,YAAY,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;QAC/D,IAAI,cAAc,EAAE;YAClB,OAAO,cAAc,CAAC;SACvB;QAED,cAAc,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC;QAC1C,YAAY,CAAC,OAAO,CAAC,mBAAmB,EAAE,cAAc,CAAC,CAAC;QAC1D,OAAO,cAAc,CAAC;IACxB,CAAC;IACD,uBAAuB;IACvB,WAAW,EAAE,GAAG,EAAE,CAAC,IAAI;IACvB,eAAe,EAAE,GAAG,EAAE,CAAC,IAAI;CACF,CAAC","sourcesContent":["import UUID from 'uuid-js';\n\nimport { InstallationIdProvider } from './InstallationIdProvider';\n\nconst INSTALLATION_ID_KEY = '@@expo-notifications.InstallationId@@';\n\nexport default {\n  getInstallationIdAsync: async () => {\n    let installationId = localStorage.getItem(INSTALLATION_ID_KEY);\n    if (installationId) {\n      return installationId;\n    }\n\n    installationId = UUID.create().toString();\n    localStorage.setItem(INSTALLATION_ID_KEY, installationId);\n    return installationId;\n  },\n  // mock implementations\n  addListener: () => null,\n  removeListeners: () => null,\n} as InstallationIdProvider;\n"]}